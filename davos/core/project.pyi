from pathlib import Path
from types import NotImplementedType
from typing import Any, Final, Literal, NoReturn, overload, TypeVar

__all__ = list[Literal['DAVOS_CONFIG_DIR', 'DAVOS_PROJECT_DIR', 'Project', 'get_notebook_path', 'get_project',
                       'prune_projects', 'use_default_project']]

DAVOS_CONFIG_DIR: Final[Path]
DAVOS_PROJECT_DIR: Final[Path]
PATHSEP: Final[Literal['/', '\\']]
PATHSEP_REPLACEMENT: Final[Literal['___']]
SITE_PACKAGES_SUFFIX: Final[str]

_P = TypeVar('_P', bound=Project)
_InstalledPkgs = list[tuple[str, str]]

class ProjectChecker(type):
    def __call__(cls, name: Path | str) -> AbstractProject | ConcreteProject: ...

class Project(metaclass=ProjectChecker):
    _installed_packages: _InstalledPkgs
    _site_packages_mtime: float
    name: str
    safe_name: str
    project_dir: Path
    site_packages_dir: Path
    def __init__(self, name: str) -> None: ...
    def __del__(self) -> None: ...
    @overload
    def __eq__(self: _P, other: _P) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool | Literal[False]: ...
    @overload
    def __lt__(self, other: Project) -> bool: ...
    @overload
    def __lt__(self, other: Any) -> bool | NotImplementedType: ...
    def __repr__(self) -> str: ...
    @property
    def installed_packages(self) -> _InstalledPkgs: ...
    def _refresh_installed_pkgs(self) -> None: ...
    def freeze(self) -> str: ...
    def remove(self, yes: bool = ...) -> None: ...
    def rename(self, new_name: Path | str) -> None: ...

class AbstractProject(Project):
    def __getattr__(self, item: str) -> NoReturn: ...
    def __repr__(self) -> str: ...